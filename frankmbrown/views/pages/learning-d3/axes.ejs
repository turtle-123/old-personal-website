<%# 
PARTIAL ROUTE: pages/learning-d3/axes.ejs
PARTIAL DESCRIPTION: Description...
LOCAL VARIABLES:
----------------------------------
- locals.fullPageRequest
- locals.pageRequest
- locals.jsNonce
%>
<%if(locals.fullPageRequest||locals.pageRequest){%>
  
<h1 class="page-title" id="top-of-page">D3.js Axes</h1>

<section id="wjat-my-height-might-look-like" class="mt-4">
    <h2 class="bold bb-thick h2">
      <a href="#what-my-height-might-look-like" class="same-page fw-regular">What My Height My Look Like</a>
    </h2>
</section>
<div id="container" style="min-height: 500px;" class="hz-scroll flex-row justify-center"></div>

  <p>
    The example above mostly demonstrates <span class="t-info fw-regular">linear and time</span> scales. It was the first graph I made with d3.js trying to see what the basics were. It mostly just involves 
    setting a scale for the axis using a <strong>domain</strong> and a <strong>range</strong> where the domain is the range of real values (values that are actually represented in the data)
    and the range represents svg values - values that should correspond to the min and the max svg values. i.e., you can use the returned axis function to transform data to get where the data should appear in the svg. Something is wrong with the labels and axes that I need to figure out. 
  </p>

  <div id="copy_math_html11h4a01upjld" class="katex-block mt-1" style="position: relative;">
    <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext>domain</mtext><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>⇒</mo><mtext>axis</mtext><mo stretchy="false">(</mo><msub><mtext>domain</mtext><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo stretchy="false">)</mo><mo>⇒</mo><msub><mtext>svg</mtext><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mspace linebreak="newline"></mspace><msub><mtext>domain</mtext><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>⇒</mo><mtext>axis</mtext><mo stretchy="false">(</mo><msub><mtext>domain</mtext><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy="false">)</mo><mo>⇒</mo><msub><mtext>svg</mtext><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\textrm{domain}_{min} \Rightarrow \textrm{axis}(\textrm{domain}_{min})  \Rightarrow \textrm{svg}_{min} \\ \textrm{domain}_{max} \Rightarrow \textrm{axis}(\textrm{domain}_{max}) \Rightarrow \textrm{svg}_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">domain</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord textrm">axis</span></span><span class="mopen">(</span><span class="mord"><span class="mord text"><span class="mord textrm">domain</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6747em;vertical-align:-0.2441em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">svg</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2175em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">domain</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord textrm">axis</span></span><span class="mopen">(</span><span class="mord"><span class="mord text"><span class="mord textrm">domain</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6747em;vertical-align:-0.2441em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">svg</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0573em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span></span></span></span></span>
    <button type="button" data-snackbar="" data-selem="#copy-math-success" data-copy-input="" data-input="tex_input_copyrkeagy0lnnq" aria-haspopup="true" class="toggle-button dark small" style="position: absolute; top: 3px; right: 3px; z-index: 2;" aria-label="Copy TeX Expression">
      <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="ContentCopy">
        <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z">
        </path>
      </svg>
      <input hidden="" type="text" name="tex_input_copyrkeagy0lnnq" id="tex_input_copyrkeagy0lnnq" value="\textrm{domain}_{min} \Rightarrow \textrm{axis}(\textrm{domain}_{min})  \Rightarrow \textrm{svg}_{min} \\ \textrm{domain}_{max} \Rightarrow \textrm{axis}(\textrm{domain}_{max}) \Rightarrow \textrm{svg}_{max}">
    </button>
  </div>

  <p class="mt-1">
    Beyond setting the scale for the axes, you can also use methods on the axes to customize how the tick marks are presented. The methods can be reviewed <a class="secondary link" target="_blank" href="https://d3js.org/d3-axis">in the documentation</a>.
  </p>

  <script nonce="<%=locals.jsNonce%>" type="module">
  
    import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
  
    const firstContainer = document.getElementById('container');
    // Declare the chart dimensions and margins.
    const width1 = 600;
    const height1 = 500;
    const height2 = 200;
    const marginTop = 60; // margins are like padding inside the svg
    const marginRight = 90;
    const marginBottom = 70;
    const marginLeft = 70;

    if (firstContainer) {
      const svg = d3.create('svg')
      .attr("viewBox", [0, 0, width1, height1])
      .attr('width',width1)
      .attr('height',height1)
      .attr('class','hz-scroll')
      .style('overflow','auto')
  
      const xB = d3.scaleUtc()
      .domain([new Date("1998-10-08T00:00Z"),new Date()])
      .range([marginLeft,width1-marginRight]);
      
      const xT = d3.scaleLinear()
      .domain([new Date("1998-10-08T00:00Z"),new Date()])
      .range([marginLeft,width1-marginRight])
  
      const yL = d3.scaleLinear()
      .domain([0,70])
      .range([height1-marginBottom,marginTop]);
  
      const yR = d3.scaleLinear()
      .domain([0,70])
      .range([height1-marginBottom,marginTop])
  
      // Axes
  
      const gl = svg.append('g')
      .attr("transform", `translate(${marginLeft},0)`)
      .call(
        d3
        .axisLeft()
        .scale(yL)
        .tickSize(3)
      )
      
      const gr = svg.append('g')
      .attr('transform',`translate(${width1-marginRight},0)`)
      .call(
        d3
        .axisRight()
        .scale(yR)
        .tickFormat(x => String(Math.floor(x/12)).concat("' ").concat(x%12))
        .tickValues([12,24,36,48,60,66])
        .tickSizeInner(8)
        .tickSizeOuter(8)
      );
      const formatTime = d3.utcFormat("%y");
      const gb = svg.append('g')
      .attr("transform", `translate(0,${height1 - marginBottom})`)
      .call(
        d3
        .axisBottom()
        .scale(xB)
        .tickFormat(x => formatTime(x))
        .ticks(10)
        .tickSize(3)
      )
  
      const formatTime2 = d3.utcFormat("%Y");
      const getDateTemp = (y) => (new Date(`1-1-${y}`))
      const gT = svg.append('g')
      .attr("transform",`translate(0,${marginTop})`)
      .call(
        d3
        .axisTop()
        .scale(xT)
        .tickFormat(x => formatTime2(x))
        .tickValues([getDateTemp(2000), getDateTemp(2004), getDateTemp(2008), getDateTemp(2012), getDateTemp(2016), getDateTemp(2020),getDateTemp(2024)])
        .tickSize(3)
      )
  
  
      // Labels
  
      const yLLabel = svg.append('text')
      .style("text-anchor", "middle")
      .attr('class','body1 bold')
      .attr("transform", `translate(${marginLeft/2},${(height1-marginTop)/2}) rotate(-90)`)
      .text('Height (in)')
      .attr('style','fill: var(--text-primary)!important;');
  
      const yRLabel = svg.append('text')
      .style("text-anchor", "middle")
      .attr('class','body1 bold')
      .attr("transform", `translate(${width1 - marginRight/2},${(height1-marginTop)/2}) rotate(90)`)
      .text('Height (ft)')
      .attr('style','fill: var(--text-primary)!important;');
      
      const xBLabel = svg.append('text')
      .style("text-anchor", "middle")
      .attr('class','body1 bold')
      .attr("transform", `translate(${(width1-marginLeft)/2},${(height1-marginBottom/2)})`)
      .text('Year (yy)')
      .attr('style','fill: var(--text-primary)!important;');
  
      const xTLabel = svg.append('text')
      .style("text-anchor", "middle")
      .attr('class','body1 bold')
      .attr("transform", `translate(${(width1-marginLeft)/2},${(marginTop/2)})`)
      .text('Year (YYYY)')
      .attr('style','fill: var(--text-primary)!important;');
  
  
      // Fake Data 
      const path = d3.path();
  
      const heightData = [
        { age: 0, height: 20},
        { age: 1, height: 28},
        { age: 2, height: 33},
        { age: 3, height: 37},
        { age: 4, height: 38},
        { age: 5, height: 41},
        { age: 6, height: 44},
        { age: 7, height: 47},
        { age: 8, height: 50},
        { age: 9, height: 53},
        { age: 10, height: 55},
        { age: 11, height: 57},
        { age: 12, height: 59},
        { age: 13, height: 62},
        { age: 14, height: 64},
        { age: 15, height: 65},
        { age: 16, height: 66},
        { age: 17, height: 66},
        { age: 18, height: 66},
        { age: 19, height: 66},
        { age: 20, height: 66},
        { age: 21, height: 66},
        { age: 22, height: 66},
        { age: 23, height: 66},
        { age: 24, height: 66},
        { age: 25, height: 66},
      ].map((obj) => {
        obj.age+=1998;
        obj.age = xB(new Date(`12-12-${obj.age}`));
        obj.height = yL(obj.height);
        return obj;
      })
      path.moveTo(heightData[0].age,heightData[0].height);
      for (let i = 1; i < heightData.length; i++) {
        path.lineTo(heightData[i].age,heightData[i].height);
      }
      
      
      for (let point of heightData) {
        const newCircle = d3.path();
        newCircle.arc(point.age,point.height,5,0,2 * Math.PI)
        svg.append('path')
        .attr('d',newCircle)
        .attr('style','stroke: var(--primary); fill: var(--secondary);')
      }
  
      svg.append('path')
      .attr('d',path)
      .attr('style','stroke: var(--info); fill: transparent;')
  
      firstContainer.append(svg.node());
  
    }
  
  </script>


  <%-include('../../partials/pagePartial')%>
<%}%>