<section id="id_dd2ca3d0-459c-45be-895c-1d851d974e36" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_dd2ca3d0-459c-45be-895c-1d851d974e36" class="same-page bold">CSS Font Loading API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_fa6e9ac8-0482-44b9-a849-41520d8c8c06">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_fa6e9ac8-0482-44b9-a849-41520d8c8c06" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/CSS_Font_Loading_API">CSS Font Loading API Reference</a></li></ul>
        <blockquote class="blockquote">
            The <strong>CSS Font Loading API</strong> provides events and interfaces for dynamically loading font resources.
        </blockquote>
        <p class="mt-2">
            CSS stylesheets allow authors to use custom fonts; specifying fonts to download using the <span class="text-code">@font-face</span> rule and applying them to elements with the <span class="text-code">font-family</span> property. Most user-agents only fetch and download fonts when they are first needed, which can result in a perceptible delay. 
        </p>
        <p class="mt-2">
            The CSS Font Loading API overcomes this problem by letting authors control and trakc when a font face is fetched and loaded, and when it is added to the font face set owned by the document or worker. A font face can be loaded either before or after it is added to a font face set, but it <em>must</em> be added to the set before it can be used for drawing.
        </p>
        <p class="mt-2">
            For an example of the CSS Font Loading API in pracice, see the <a class="primary link" hx-get="/projects/configure-size-adjust-property" href="/projects/configure-size-adjust-property" hx-push-url="true" hx-target="#PAGE" hx-indicator="#page-transition-progress">Font Size Adjust Project Page</a>.
        </p>
    </div>
</section>
<section id="id_6b616a3a-4280-4d44-a2b7-ee665751d99f" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_6b616a3a-4280-4d44-a2b7-ee665751d99f" class="same-page bold">CSS Painting API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_edb676cb-7eb9-4ae1-9865-3fa097a7f301">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_edb676cb-7eb9-4ae1-9865-3fa097a7f301" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/CSS_Painting_API">CSS Painting API Reference</a></li></ul>
        <blockquote class="blockquote">
            The CSS Painting API - part of the CSS Houdini umbrella of APIs - allows developers to write JavaScript functions that can draw directly into an element's background, border, or content.
        </blockquote>
        <p class="mt-2">
            Essentially, the CSS Painting API contains functionality allowing developers to create custom values for <span class="text-code">paint()</span>, a CSS <span class="text-code">&lt;image&gt;</span> function. You can then apply these values to properties like <span class="text-code">background-image</span> to set complex custom backgrounds on an element.
        </p>
        
    </div>
</section>
<section id="id_f929b3e9-df5e-453f-84d3-26e333c321ab" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_f929b3e9-df5e-453f-84d3-26e333c321ab" class="same-page bold">CSS Properties and Values API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_186c1753-a309-4e4e-ae00-335a475bb0ec">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_186c1753-a309-4e4e-ae00-335a475bb0ec" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/CSS_Properties_and_Values_API">CSS Properties and Values API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>CSS Properties and Values API</strong> - part of the <a class="secondary link" target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Houdini_APIs">CSS Houdini</a> umbrella of APIs - allows developers to explicitly define their CSS custom properties, allowing for property type checking, default values, and properties that do or do not inherit their value. 
        </blockquote>
        
    </div>
</section>
<section id="id_6a52f17c-cf69-4f79-b1c5-c7d3c8568059" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_6a52f17c-cf69-4f79-b1c5-c7d3c8568059" class="same-page bold">CSS Typed Object Model API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_8d038d8e-7625-4870-9845-d7d7fc0dba16">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_8d038d8e-7625-4870-9845-d7d7fc0dba16" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/CSS_Typed_OM_API">CSS Typed Object Model API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The CSS Typed Object Model API simplifies CSS property manipulation by exposing CSS values as types JavaScript objects rather than strings. This not only simplifies CSS manipulation, but also lessens the negative impact on performance as compared to <span class="text-code">HTMLElement.style</span>. 
        </blockquote>
        <p class="mt-2">
            The CSS Typed Object Model API provides interfaces to interact with underlying values, by represneting them with specialized JS objects that can be manipulated and understood more easily and more reliably than string parsing and concatenation. This is easier for authors and generally faster, as values can be direcly manipulated. 
        </p>
        <h3 class="h4 bold mt-2">Interfaces</h3>
        <ul>
            <li><span class="text-code">CSSStyleValue</span>: Base class of all CSS values accessible through the Typed OM API. An instance of this class may be used anywhere a string is expected.</li>
            <li><span class="text-code">StylePropertyMap</span>: Provides a representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.</li>
            <li><span class="text-code">CSSUnparsedValue</span>: Represents property values that reference custom properties. It consists of a long list of fragments and variable references. </li>
            <li><span class="text-code">CSSKeyWordValue</span> Serialization: This interface creates an object to represent keywords an other identifiers. You can use this to get or set the value of a CSSKeywordValue.</li>
        </ul>
        
    </div>
</section>
<section id="id_7536ed2f-dac1-4ef4-9c45-ada0b24b04c9" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_7536ed2f-dac1-4ef4-9c45-ada0b24b04c9" class="same-page bold">CSSOM</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_ed757f28-f337-4203-983c-e47f5ee7a122">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_ed757f28-f337-4203-983c-e47f5ee7a122" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/CSS_Object_Model">CSSOM Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>CSS Object Model</strong> is a set of APIs allowing the manipulation of CSS from JavaScript. It is much like the DOM, but for the CSS rather than the HTML. It allows users to read and modify CSS Style dynamically. 
        </blockquote>
        
    </div>
</section>
<section id="id_32f310ea-c7ed-4c6c-a1e7-753912974c89" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_32f310ea-c7ed-4c6c-a1e7-753912974c89" class="same-page bold">Canvas API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_60d94830-8c99-495d-8180-f1db3a5854e0">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_60d94830-8c99-495d-8180-f1db3a5854e0" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Canvas_API">Canvas API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>Canvas API</strong> provides a means for drawing graphics via JavaScript and the HTML <span class="text-code">&lt;canvas&gt;</span> element. Among other things, it can be used for animation, game graphics, data visualization, photo manipulation, and real-time video processing. 
            <br>
            The Canvas API largely focuses on 2D graphics. The <a class="secondary link" target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</a>, which alsoi uses the <span class="text-code">&lt;canvas&gt;</span> element, draws hardware-accelerated 2D and 3D graphics. 
        </blockquote>
        

    </div>
</section>
<section id="id_a5dc2bb2-e750-4571-a9a2-d47856edbc3b" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_a5dc2bb2-e750-4571-a9a2-d47856edbc3b" class="same-page bold">Channel Messaging API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_3944c07c-1e67-4baf-aef2-edeb22123246">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_3944c07c-1e67-4baf-aef2-edeb22123246" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Channel_Messaging_API">Channel Messaging API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>Channel Messaging API</strong> allows two separate scripts running in different browsing contexts attached to the same focument (e.g., two IFrames, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end.
        </blockquote>
        <p class="mt-2">
            A message channel is created using the <span class="text-code">MessageChannel()</span> constructor. Once created, the two ports of the channel can be accessed through the <span class="text-code">MessageChannel.port1</span> and <span class="text-code">MessageChannel.port2</span> properties (which both return <span class="text-code">MessagePort</span> objects.) The app that created the channel uses <span class="text-cod">port1</span>, and the app at the other end of the port uses <span class="text-code">port2</span> - you send a message to <span class="text-code">port2</span>, and transfer the port over to the other browsing context using <span class="text-code">window.portMessage</span> along with two arguments. When these transferrable objects are transferred, they are no longer usable on the context they previously belonged to. A port, after it is sent, can no longer be used by the original context. The other browsing context can isten for the messae using <span class="text-code">onmessage</span> ane grab the contents of the message using the event's <span class="text-code">data</span> attribute. You could then respons by sending a message back to the original document using <span class="text-code">MessagePort.postMessage</span>.
        </p>
        
    </div>
</section>
<section id="id_fc705152-4238-47e4-8838-ec9490d57f8e" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_fc705152-4238-47e4-8838-ec9490d57f8e" class="same-page bold">Clipboard API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_8f7f87df-a6ab-4240-aa06-1f18d86ef1d4">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_8f7f87df-a6ab-4240-aa06-1f18d86ef1d4" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Clipboard_API">Clipboard API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>Clipboard API</strong> provides the ability tro respond to clipboard commands (cut, copy, paste), as well as to asynchronously read from and write to the system clipboard. 
        </blockquote>
        <p class="mt-2">
            The <em>system clipboard</em> is a data buffer belonging to the operating system hosting the browser, which is used for short-term data storage and/or data transfers between documents or applications. It is usually implemented as an anonymous, temporary <a class="secondary link" target="_blank" href="https://en.wikipedia.org/wiki/Data_buffer">data buffer</a>, sometimes called the <em>paste buffer</em>, that can be accessed from most all programs within the environment via defined programming interfaces. 
        </p>
        

    </div>
</section>
<section id="id_018e5bb9-7fdb-4bd5-9433-c83d1ef754e5" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_018e5bb9-7fdb-4bd5-9433-c83d1ef754e5" class="same-page bold">Compression Streams API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_a8729fe2-0c5d-4621-9909-b6d9651f3ed6">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_a8729fe2-0c5d-4621-9909-b6d9651f3ed6" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Compression_Streams_API">Compression Streams API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>Compression Streams API</strong> provides a JavaScript API for compressing and decompressing streams of data using gzip or deflate formats. Built in compression means that JavaScript applications will not need to include the compression library, which makes the download size of the application smaller. 
        </blockquote>
        
    </div>
</section>
<section id="id_4cdcc900-355c-4edf-aafe-7ad9f768d635" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_4cdcc900-355c-4edf-aafe-7ad9f768d635" class="same-page bold">Compute Pressure API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_89e970c4-6fbc-438e-980d-f0cbd03a3bce">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_89e970c4-6fbc-438e-980d-f0cbd03a3bce" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Compute_Pressure_API">Compute Pressure API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>Compute Pressure API</strong> is a JavaScript API that enables you to observe the pressure of system resources such as the CPU. 
        </blockquote>
        <p class="mt-2">
            In real-time applications, such as video conferencing web apps, the Compute Pressure API lets you detect which pressure the system is currently facing. The system will handle any stress as well as it can, but a collaboration between system and app is useful to handle the pressure best. This API notifies you of high-level pressure changes so you can adjust your workloads and still offer a pleasant user experience. <br>
            <strong class="h4">Use Cases:</strong>
        </p>
        <ul>
            <li>Changing video quality depending on pressure.</li>
            <li>Web games, for which you would balance the quality and amount of 3D assets, change the framerate, resolution, depth of field, to ensure low latency and stable frame rate.</li>
            <li>User interfaces, for which you could render placeholders instead of real data while the system is under pressure, and render the real content once the pressure has eased. </li>
        </ul>
        <p class="mt-2">
            In your web apps, different tasks are fighting for the processing time of different processing units (CPU, GPU, and other specialized processing units). The current version of the Compute Pressure API specification defines two main source types that can be queried together to gather pressure information:
        </p>
        <ul>
            <li><span class="text-code">"thermals"</span> represents the global thermal state of the entire system</li>
            <li> <span class="text-code">"cpu"</span> reprsents the average pressure of the central processing unit (CPU) across all its cores. This state can be affected by other apps and sites than the observing site.</li>
        </ul>
        <p class="mt-2">
            The compute pressure API uses human-readable pressure states with semantics, given that metrics for CPU utilization are often <a class="secondary link" target="_blank" href="https://www.brendangregg.com/blog/2017-05-09/cpu-utilization-is-wrong.html">midleading</a>. 
        </p>
        
    </div>
</section>
<section id="id_b886c295-4d8e-49ad-a371-ae7f4b5ff0f5" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_b886c295-4d8e-49ad-a371-ae7f4b5ff0f5" class="same-page bold">Console API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_a802ef65-feb2-4cec-af7c-de36f43446e8">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_a802ef65-feb2-4cec-af7c-de36f43446e8" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Console_API">Console API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The Console API provides functionality to allow the devleopers to perform debuggig tasks, such as logging essages or the values of variables at set points in your code, or timing how long an operation takes to complete. 
        </blockquote>
        
        
    </div>
</section>
<section id="id_26036926-711c-40f1-b4ca-b36a09d20c48" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_26036926-711c-40f1-b4ca-b36a09d20c48" class="same-page bold">Contact Picker API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_c3955072-0e92-4d6a-9060-4bea739cc1e6">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_c3955072-0e92-4d6a-9060-4bea739cc1e6" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Contact_Picker_API">Contact Picker API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The Contact Picker API allows users to select enries from their contact list and share limited details of the selected entries with a website or application.
        </blockquote>
        <p class="mt-2">
            The Contacts Picker API brings native application functionality to web applications. Use cases include selecting contacts to message via email or chat application, selecting a contacts phone number to use with voice over IP (<abbr title="Voice over IP">VOIP</abbr>), or for discovering contacts who have already joined a social platform. 
            <br>
            When calling the <span class="text-code">select</span> method of the <span class="text-code">ContactsManager</span> interface, the user is presented with a contact picker, whereby they can then select contact information to share with the web application. User interaction is required before permission to display the contact picker is granted and access to contacts is not persistent; the user must grant access every time a request is made by the application.
        </p>

  
    </div>
</section>
<section id="id_145c34e9-e63a-4930-b6c2-67426df168a3" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_145c34e9-e63a-4930-b6c2-67426df168a3" class="same-page bold">Content Index API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_807865f7-dcef-492a-b6e7-0a9fee0e7b59">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_807865f7-dcef-492a-b6e7-0a9fee0e7b59" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Content_Index_API">Content Index API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>Content Index API</strong> allows developers to register their offline enabled content with the browser.
        </blockquote>
        <p class="mt-2">
            Content Indexing allows developers to tell the browser about their specific offline content. This allows users to discover and view what is available, whilst giving developers the abilitu to add and manage this content. Examples include news websites prefetching the latest articles in the background, or a content streaming app registering downloaded content. This AI is an extension of service workers. 
            <br>
            Indexed entries do not automatically expire. It's good practice to present an interface for clearing out entries, or periodically remove older entries. 
        </p>
        
    </div>
</section>
<section id="id_f89cd165-e5a9-4f77-bd2c-f7d4a1b8097e" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_f89cd165-e5a9-4f77-bd2c-f7d4a1b8097e" class="same-page bold">Cookie Store API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_f115d875-0b86-4428-b485-09bab82e7459">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_f115d875-0b86-4428-b485-09bab82e7459" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Cookie_Store_API">Cookie Store API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>Cookie Store API</strong> is an asynchronous API for managing cookies, available in windows and also service workers. The <em>Cookie Store API</em> provides an updated method of managing cookies (updated compared to <span class="text-code">document.cookie</span>). It is asynchronous and promise-based, thereforre does not block the event loop. It does not rely on <span class="text-code">document</span> and so is available to service workers. 
        </blockquote>
        
    </div>
</section>
<section id="id_4cb38d98-4dce-442e-9716-1dbccc1b3a5d" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_4cb38d98-4dce-442e-9716-1dbccc1b3a5d" class="same-page bold">Credential Management API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_f6e1f81f-6d16-42ba-a0dc-507328d7f22c">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_f6e1f81f-6d16-42ba-a0dc-507328d7f22c" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Credential_Management_API">Credential Management API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The Credential Management API enables a website to create, store, and retrieve <a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Credential_Management_API">credentials</a>. A credential is an item which enables a system to make an authentication decison. We can think of it as a piece of evidence that a user presents to a website to demonstrate that they really are the person they are claiming to be. 
        </blockquote>
        <p class="mt-2">
            The central interface is the <span class="text-code">CredentialsContainer</span>, which is accessed through the <span class="text-code">navigator.credentials</span> property and provides three main functions:
        </p>
        <ol>
            <li><span class="text-code">create()</span>: create a new credential</li>
            <li><span class="text-code">store()</span>: store a new credential locally</li>
            <li><span class="text-code">get()</span>: retrieve a credential, which can then be used to log a user in.</li>
        </ol>
        
    </div>
</section>
