<section id="id_8f1a475d-65c3-4f01-b2f6-9da7ef52abd1" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_8f1a475d-65c3-4f01-b2f6-9da7ef52abd1" class="same-page bold">Device Memory API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_9a50efe1-7180-4269-a3cf-e9ea7fe2373a">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_9a50efe1-7180-4269-a3cf-e9ea7fe2373a" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Device_Memory_API">Device Memory API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The capabilities of a client device largely depend on the amount of available RAM. Traditionally, developers had to use heuristics and either benchmark a device or infer device capbilities based on other factors like the device manufacturer or User Agent strings.
        </blockquote>
        <p class="mt-2">
            You can query the approximate amount of RAM a device has by retrieving <span class="text-code">Navigator.deviceMemory</span> or <span class="text-code">WorkerNavigator.deviceMemory</span>. 
        </p>
        
    </div>
</section>
<section id="id_421475b2-9d5b-48c8-bf2d-02c4431dfcf6" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_421475b2-9d5b-48c8-bf2d-02c4431dfcf6" class="same-page bold">Device Orientation Events</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_4556f619-15cb-4dc7-8624-19314ee4a43f">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_4556f619-15cb-4dc7-8624-19314ee4a43f" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Device_orientation_events">Device Orientation Events Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            Device orientation events are events that allow you to detect a device's physical orientation as well as allowing you to detect the device's motion. 
        </blockquote>
        <p class="mt-2">
            Mobile devices commonly have sensors such as gyroscopes, compasses, and accelerometers that can enable applications running on the device to detect the device's orientation and motion. The device orientation events able you to write web applications that can change their behavior based on the orientation of the user's device, and that can react when the user moves their device. 
        </p>
        
    </div>
</section>
<section id="id_2eafbea6-6dce-4347-b860-4472120ff822" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_2eafbea6-6dce-4347-b860-4472120ff822" class="same-page bold">Document Picture-in-Picture API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_c9bbf71f-e938-4da8-a192-80b14176586c">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_c9bbf71f-e938-4da8-a192-80b14176586c" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Document_Picture-in-Picture_API">Document Picture-in-Picture API Reference</a></li></ul>
        <blockquote class="blockquote">
            The <strong>Document Picture-in-Picture API</strong> makes it possivle to open an always-on-top window that can be populated with arbitrary HTML content - for example a video with custom controls or a set of streams showing the participants of a video conference call. It extends the earlier Picture-in-Picture API for <span class="text-code">&lt;video&gt;</span>, which specifically enables an HTML <span class="text-code">&lt;video&gt;</span> element to be put into an always-on-top window.
        </blockquote>
        <p class="mt-2">
            It is often helpful to have a different window available to a web app in addition to the main window in which the app is running. You might want to browse other windows while keeping specific app content in view, or you might want to give that content its own space while keeping the main app window feed up to display other content. <strong class="t-warning">This API only works in Microsoft Edge, so I am going to move on.</strong> 
        </p>
    </div>
</section>
<section id="id_2ed75961-c2e9-4f9b-907e-bf3ca736eb35" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_2ed75961-c2e9-4f9b-907e-bf3ca736eb35" class="same-page bold">EditContext API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_d09b5dd6-432e-4136-b88a-dfc137f0ce56">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_d09b5dd6-432e-4136-b88a-dfc137f0ce56" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/EditContext_API">EditContext API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>EditContext API</strong> can be used to build rich text editors on the web that support advanced text input experiences, such as <a class="secondary link" target="_blank" href="https://developer.mozilla.org/en-US/docs/Glossary/Input_method_editor">Input Method Editor</a> (<abbr title="Input Method Editor">IME</abbr>) composition, emoji picker, or any other platform-specific editing-related UI surfaces. 
        </blockquote>
        <p>
            With the EditContext API, you get the flexibility to render your own editable text region with any technology you want. If you decide to implement your own editable region, whether it draws text into a <span class="text-code">&lt;canvas&gt;</span> or renders it into a series of DOM elements, you are responsible for providing the things that the browser would normally provide if you were using a <span class="text-code">&lt;textarea&gt;</span> instead:
        </p>
        <ul>
            <li>Rendering the text</li>
            <li>Rendering the selection</li>
            <li>Letting the OS text input service know when the selection changes.</li>
            <li>Letting the OS text input service know where the text is located in the UI, so the input method software can display the IME composition window in the correct location.</li>
            <li>Applying certain text formats.</li>
        </ul>
        
    </div>
</section>
<section id="id_3be219c5-1514-45d6-8c06-08f128aaaf61" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_3be219c5-1514-45d6-8c06-08f128aaaf61" class="same-page bold">Encoding API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_3f2d0603-7607-48d5-96d7-47816bcfdbc0">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_3f2d0603-7607-48d5-96d7-47816bcfdbc0" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Encoding_API">Encoding API Reference</a></li></ul>
        <blockquote class="blockquote">The <strong>Encoding API</strong> provides a mechanism for handling text in various chracter encodings, uncluding lgeacy non-UTF-8 encodings.</blockquote>
        <p class="mt-2">
            The API provides 4 interfaces:
        </p>
        <ol>
            <li><span class="text-code">TextDecoder</span></li>
            <li><span class="text-code">TextEncoder</span></li>
            <li><span class="text-code">TextDecoderStream</span></li>
            <li><span class="text-code">TextEncoderStream</span></li>
        </ol>
        
    </div>
</section>
<section id="id_bf137742-2e05-4ef9-aff6-97101aa684e9" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_bf137742-2e05-4ef9-aff6-97101aa684e9" class="same-page bold">Encrypted Media Extension</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_eb2a458b-3ff2-4b46-93dd-0d2b59b99945">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_eb2a458b-3ff2-4b46-93dd-0d2b59b99945" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Encrypted_Media_Extensions_API">Encrypted Media Extension Reference</a></li></ul>
        <blockquote class="blockquote">
            The <strong>Encrypted Media Extensions API</strong> provides interfaces for controlling the playback of content which is subject to digital restrictions management scheme. 
            <br>
            Access to this API is provided through <span class="text-code">Navigator.requestMediaKeySystemAccess()</span>.
        </blockquote>
        
    </div>
</section>
<section id="id_2c91e484-eb46-41fb-8e69-0983baffcc12" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_2c91e484-eb46-41fb-8e69-0983baffcc12" class="same-page bold">EyeDropper API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_deeafcf6-889a-468a-98e5-1ee1dc8a4dea">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_deeafcf6-889a-468a-98e5-1ee1dc8a4dea" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/EyeDropper_API">EyeDropper API Reference</a></li></ul>
        <blockquote class="blockquote"> 
            The <strong>EyeDropper API</strong> provides a mechanism for creating an eyedropper tool. Using this tool, users can sample colors from their screens, including outside of the browser window. 
        </blockquote>
        <p class="mt-2">
            Creative applications often allows users to sample colors from drawings or shapes in the application to reuse. Web applications can use the EyeDropper API to provide a similar eyedropper mode, provided by the browser.
        </p>
        
    </div>
</section>
<section id="id_5440c85f-4bf5-43b1-8f23-9393ad420681" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_5440c85f-4bf5-43b1-8f23-9393ad420681" class="same-page bold">FedCM API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_358472ec-b7b6-48fc-8255-850d7500120e">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_358472ec-b7b6-48fc-8255-850d7500120e" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/FedCM_API">FedCM API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>Federated Credential Manager API</strong> (or <abbr title="Federated Credential Manager">FCM</abbr> API) provides a standard mechanism for identity providers (idPs) to make identity federation services available on the wbe in a privacy-prserving way, without the need for third-party cookies and redirects. 
        </blockquote>
        <p class="mt-2">
            <em>Identity Federation</em> is the delegation of user authentication from a website requiring user sign-up or sign-in, such as an e-commerce or social networking site (also known as a relying party or <abbr title="Relying Party">RP</abbr>), to a trusted third-party identity provider (IdP) such as Google, Facebook/Meta, GitHub, etc. Relying parties can register with IdPs, allowing users to sign-in using the accounts they have registered with the IdP. 
            <br>
            FedCM provides a dedicated mechanism for federated identity flows on the web, enabling supporting browsers to provide special UI elements on RPs, allowing users to choose an IdP account to use for sign-in.
        </p>
        
    </div>
</section>
<section id="id_c71edbc9-9e29-49bf-a541-a56215231ee1" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_c71edbc9-9e29-49bf-a541-a56215231ee1" class="same-page bold">Fenced Frame API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_698903c2-2f78-43e8-aca6-dc9aa8b29141">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_698903c2-2f78-43e8-aca6-dc9aa8b29141" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Fenced_frame_API">Fenced Frame API Reference</a></li></ul>
        <blockquote class="blockquote">
            The <strong>FencedFrame API</strong> provides functionality for controlling content embeeded in <span class="text-code">&lt;fencedframe&gt;</span> elements.
        </blockquote>
        <p class="mt-2">
            One major source of privacy and security problems on the web is content embedded in <span class="text-code">&lt;iframe&gt;</span> elements. Historically, these elements have been used to set third-party cookies which can be used to share information and track users across sites. <span class="text-code">&lt;fencedframe&gt;</span> elements aim to solve problems with iframes in that:
        </p>
        <ul>
            <li>Communication cannot be shared between the fenced frame content and its embedding site.</li>
        <li>A <span class="text-code">&lt;fencedframe&gt;</span> can access cross-site data, but only in a very specific set of controlled circumstances that preserve user privacy.</li>
            <li>A <span class="text-code">&lt;fencedframe&gt;</span> cannot be freely manipulated or have its data acessedvia regular scripting.</li>
            <li>A <span class="text-code">&lt;fenced-frame&gt;</span> cannot access the embedding context's DOM, bor can the embedding context access the frame's DOM.</li>
        </ul>
        
    </div>
</section>
<section id="id_00dac3a3-11a5-4afa-88dd-4a3d29e45502" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_00dac3a3-11a5-4afa-88dd-4a3d29e45502" class="same-page bold">Fetch API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_c8da38c8-e401-4f5c-8bc2-a2dbf3d6f72a">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_c8da38c8-e401-4f5c-8bc2-a2dbf3d6f72a" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Fetch_API">Fetch API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The Fetch API provides an interface for fetching resources (including across the network). It is a more powerful and flexble replacement for <span class="text-code">XMLHttpRequest</span>.
        </blockquote>
        <ul>
            <li>The Fetch API uses Response and Reuqest objects, as well as related concepts such as CORS and HTTP Origin Header semantics.</li>
            <li><span class="text-code">fetch()</span> can work in both <span class="text-code">Widow</span> and <span class="text-code">Worker</span> contexts. </li>
            <li>It returns a <span class="text-code">Promise</span> and resolves to a <span class="text-code">Response</span>.</li>
        </ul>
        
    </div>
</section>
<section id="id_dd8173fd-a70d-4d61-86ab-646403ba91ca" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_dd8173fd-a70d-4d61-86ab-646403ba91ca" class="same-page bold">File API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_092f0624-496d-48ea-959c-b7e2a5445502">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_092f0624-496d-48ea-959c-b7e2a5445502" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/File_API">File API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The File API enables web applications to access files and their contents. Web applications can access files when the user makes them available, either using a file <span class="text-code">&lt;input&gt;</span> element or via drag and drop.
        </blockquote>
        <p class="mt-2">
            Sets of files made avalable this way are represented as <span class="text-code">FileList</span> objects, which enable a web application to retrieve individual <span class="text-code">File</span> objects. In turn, <span class="text-code">File</span> objects provide access to metadata such as the file's name, size, type, and last modified date. <span class="text-code">File</span> objects can be passed to <span class="text-code">FileReader</span> objects to access the contents of the file. the <span class="text-code">FileReader</span> interface is asynchronous, but a synchronous version, available only in web workers, is provided by the <span class="text-code">FileReaderSync</span> interface. 
        </p>
        
    </div>
</section>
<section id="id_a688b1fb-6008-411d-80cd-49b816b80904" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_a688b1fb-6008-411d-80cd-49b816b80904" class="same-page bold">File System API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_88d1f1ad-b939-448d-b64b-732fbffce7c2">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_88d1f1ad-b939-448d-b64b-732fbffce7c2" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/File_System_API">File System API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>File System API</strong> - with extensions provided via the <a class="secondary link fw-regular" target="_blank" href="https://wicg.github.io/file-system-access/">File System Access API</a> to access files on the device file system - allows read, write and file management capabilities. 
        </blockquote>
        <p class="mt-2">
            This API allows interaction with files on a user's local device, or ona user-accessible network file system. Core functionality of this API includes reading, writing, or saving files, and access to directory structure. Most of the interaction with files and directories is accomplished through handles. A parent <span class="text-code">FileSystemHandle</span> class helps define two child classes: <span class="text-code">FileSystemFileHandle</span> and <span class="text-code">FileSystemDirectoryHandle</span>, for files and directories respectively. The handles represent a file or directory on the user's system. You can first gain access to them by showing the user a file or directory picker using methods such as <span class="text-code">window.showOpenFilePicker()</span> and <span class="text-code">window.showDirectoryPicker()</span>. Once these are called, the file picker presents itself and the user selects either a file or a directory. Once this happens successfully, a handle is returned. 
        </p>
        <p class="mt-2">
            Each handle provides its own functionality and there are a few differences depending on which one you are using. You can access file data, or information of the directory selected. This API opens up potential functionality the web has been lacking. Access to the API is disallowed unless the user specifically permits it.
        </p>
        <p class="mt-2">
            The <strong>origin private file system</strong> (<abbr title="Origin private file system">OPFS</abbr>) is a storage endpoint provided as part of the File System API, which is private to the origin of the page and not visible to the user like the regular file system. It provides access to a special kind of file that is highly optimized for performance ond offers in-place write access to its content.
        </p>

        
    </div>
</section>
<section id="id_27297af6-45d3-45ed-ba26-73969e154297" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_27297af6-45d3-45ed-ba26-73969e154297" class="same-page bold">File and Directory Entries API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_052b235b-5a12-42e7-a606-0ff3ba45ab8d">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_052b235b-5a12-42e7-a606-0ff3ba45ab8d" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/File_and_Directory_Entries_API">File and Directory Entries API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">The File and Directory Entries APU simulates a local file system that web apps can navigate within and access files in. You can develop apps which read, write, and create files and/or directories in a virtual, sandboxed file system.</blockquote>
        <p class="mt-2">
            There are two ways to get access to file systems defined in the cuurrent specification draft:
        </p>
        <ol>
            <li>When handling a <span class="text-code">drop</span> event for drag and drop, you can call <span class="text-code">DataTransferItem.webkitGetAsEntry()</span> to get the <span class="text-code">FileSystemEntry</span> for a dropped item. </li>
            <li>The <span class="text-code">HTMLInputElement.webkitEntries</span> property lets you access the <span class="text-code">FileSystemFileEntry</span> objects for the currently selected files, but only if they are dragged and dropped onto the file chooser. </li>
        </ol>
        
    </div>
</section>
<section id="id_b9d91fef-caac-4179-8336-6ee06f3c1277" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_b9d91fef-caac-4179-8336-6ee06f3c1277" class="same-page bold">Force Touch Events</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_4123089c-7b28-4146-8a09-4b355bcc3e10">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_4123089c-7b28-4146-8a09-4b355bcc3e10" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Force_Touch_events">Force Touch Events Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            <strong class="t-warning">NON STANDARD WARNING</strong> <br>
            <strong>Force Touch Events</strong> are a proprietary, Apple-specific feature which makes possible (where supported by the input hardware) new interactions based on how hard the user clicks or presses down on the touchscreen or trackpad.
        </blockquote>
        
    </div>
</section>
<section id="id_fd24b5e4-56ae-4d0b-be7f-0c158d67baee" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_fd24b5e4-56ae-4d0b-be7f-0c158d67baee" class="same-page bold">Fullscreen API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_004a136f-a442-4769-8670-ad6e716d3a8f">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_004a136f-a442-4769-8670-ad6e716d3a8f" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Fullscreen_API">Fullscreen API Reference</a></li>
        <li><a class="secondary link" target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide">Guide to the FullScreen API</a></li>
        </ul>
        <blockquote class="blockquote mt-2">The <strong>Fullscreen API</strong> adds methods to present a specific <span class="text-code">Element</span> (and its descendants) in fullscreen mode, and to exit fullscreen mode once it is no longer needed. This makes it possible to present desired content - such as an online game - using the user's entire screen, removing all browser user interface elements and other applications from the screen until fullscreen mode is shut off. </blockquote>

        
    </div>
</section>