<section id="id_4c5d3f1f-f42e-4db3-aa09-360c8b8fa225" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_4c5d3f1f-f42e-4db3-aa09-360c8b8fa225" class="same-page bold">Geolocation API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_a8f998dd-8ea5-46ca-a679-a7861a0daac7">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_a8f998dd-8ea5-46ca-a679-a7861a0daac7" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Geolocation_API">Geolocation API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>Geolocation API</strong> allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information. Web Extensions that wish to use the <span class="text-code">Geolocation</span> object must add the <span class="text-code">"geolocation"</span> permission totheir manifest. The user's operating system will prompt the user to allow location access the first time it is requested. 
        </blockquote>
        <p class="mt-2">
            The Geolocation APU is accessed via a call to <span class="text-code">navigator.geolocation</span>; this will cause the user's browser to ask them for permission to access their location data. If they accept, then the browser will use the best available functionality on the device to access this information (for example, GPS).The developer can now access this information in a couple different ways:
        </p>
        <ul>
            <li><span class="text-code">Geolocation.getCurrentPosition()</span>: Retrieves the device's current location.</li>
            <li><span class="text-code">Geolocation.watchPosition()</span>: Registers a handler function that will be called automatically each time the position of the device changes, returning the updated location. </li>
        </ul>
         
    </div>
</section>
<section id="id_80ae5d2d-7cc1-4218-8fac-78d10d73e2a9" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_80ae5d2d-7cc1-4218-8fac-78d10d73e2a9" class="same-page bold">Geometry Interface</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_b18b698f-e3f7-4bbe-aa96-414dfe29afe2">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_b18b698f-e3f7-4bbe-aa96-414dfe29afe2" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Geometry_interfaces">Geometry Interface Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            <strong>Geometry interface</strong> is a CSS module that provides interfaces for working with 3D and 2D graphics - in particular, for working with points, rectangles, quadrilaterals, and <a class="secondary link" target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web#transformation_matrices">transformation matrices</a> (for operations that translate/move, scale, rotate, skew/shear/slant, and flip graphics, as well as for multiplying/chaining and inverting/undoing these operations).
        </blockquote>
        <p class="mt-2">
            As a web developer, you don't always use the geometry interfaces directly, but instead use other features that rely on them behind the scenes. 
        </p>
         
    </div>
</section>
<section id="id_508db156-5fd1-4d0d-b82d-e29bfa9a4052" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_508db156-5fd1-4d0d-b82d-e29bfa9a4052" class="same-page bold">HTML DOM</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_c279cee7-22ae-43c7-bc64-607eddbab694">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_c279cee7-22ae-43c7-bc64-607eddbab694" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/HTML_DOM_API">HTML DOM Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>HTML DOM API</strong> is made up of the interfaces that define the functionality of the elements in HTML, as well as any supporting types and interfaces they rely upon. 
        </blockquote>
        <p class="mt-2">
            The functional area included in the HTML DOM API include:
        </p>
        <ul>
            <li>Access to and control of HTML elements via the DOM.</li>
            <li>Access to and manipulation of form data.</li>
            <li>Interacting with the contents of 2D images and the context of an HTML <span class="text-code">&lt;canvas&gt;</span></li>
            <li>Management of media connected to the HTML media elements.</li>
            <li>Dragging and dropping of content on webpages.</li>
            <li>Access to the browser navigation history.</li>
            <li>Supporting and connective interfaces for other APIs</li>
        </ul>
        <p class="mt-2">
            The Document Object Model (<abbr title="Document Object Model">DOM</abbr>) is an architecture that describes the structure of a <span class="text-code">document</span>; each document is represented by an instance of the interface <span class="text-code">Document</span>. A document, in turn, consists of a hierarchical tree of <strong>nodes</strong>, in which a node is a fundamental record representing a single object within the document. Each node is based on the <span class="text-code">Node</span> interface, which provides properties for getting information about the node as well as methods for creating, deleting, and organizing nodes within the DOM. Nodes don't have any concept of including teh content that is actually displayed in the doucment. They're empty vessels. The fundamental notion of a node that can represent visual content is introduced by the <span class="text-code">Element</span> interface. An <span class="text-code">Element</span> object instance represents a single element in a document created using either HTML or an XML vocabulary such as SVG. 
        </p>
        <div class="flex-row justify-center">
            <img 
            width="<%-locals.desktop?384:(locals.tablet?296:207)%>" 
            height="<%-locals.desktop?500:(locals.tablet?415:330)%>" 
            style="margin: 4px auto; max-width: 100%; aspect-ratio: auto 104 / 165 !important; height: auto;"
            srcset="https://image.storething.org/frankmbrown%2Fb046d982-7a96-42a8-aca3-929e316b2554-mobile.jpeg 207w, https://image.storething.org/frankmbrown%2Fb046d982-7a96-42a8-aca3-929e316b2554-tablet.jpeg 296w, https://image.storething.org/frankmbrown%2Fb046d982-7a96-42a8-aca3-929e316b2554-desktop.jpeg 384w" 
            sizes="(max-width: 550px) 330px, ((min-width: 550px) and (max-width: 1200px)) 415px, (min-width: 1200px) 500px" 
            src="https://image.storething.org/frankmbrown%2Fb046d982-7a96-42a8-aca3-929e316b2554-desktop.jpeg" 
            alt="Document Object Model" 
            />
        </div>
        <p class="mt-2">
            The <span class="text-code">Element</span> interface has been further adapted to represent HTML elements specifically by introducing the <span class="text-code">HTMLElement</span> interface, which all more specific HTML element classes inherit from. Every <span class="text-code">Element</span> is a <span class="text-code">Node</span> but not the other way around. An element inherits the properties and methods from all of its ancestors. 
        </p>
        <div class="flex-row justify-center">
            <img 
            width="<%-locals.desktop?650:(locals.tablet?501:351)%>" 
            height="<%-locals.desktop?556:(locals.tablet?461:367)%>" 
            style="margin: 4px auto; max-width: 100%; aspect-ratio: auto 22 / 23 !important; height: auto;"
            srcset="https://image.storething.org/frankmbrown%2F074c0819-4b92-417e-8029-027f6cee2491-mobile.jpeg 351w, https://image.storething.org/frankmbrown%2F074c0819-4b92-417e-8029-027f6cee2491-tablet.jpeg 501w, https://image.storething.org/frankmbrown%2F074c0819-4b92-417e-8029-027f6cee2491-desktop.jpeg 650w" 
            sizes="(max-width: 550px) 367px, ((min-width: 550px) and (max-width: 1200px)) 461px, (min-width: 1200px) 556px" 
            src="https://image.storething.org/frankmbrown%2F074c0819-4b92-417e-8029-027f6cee2491-desktop.jpeg" 
            alt="Inheritance of HTML Elements" 
            />
        </div>

        
    </div>
</section>
<section id="id_66b1c49a-c7cc-48b1-b241-385fadf1877c" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_66b1c49a-c7cc-48b1-b241-385fadf1877c" class="same-page bold">HTML Drag and Drop API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_41b5e16a-759f-433f-8d54-891684f7c1ea">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_41b5e16a-759f-433f-8d54-891684f7c1ea" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/HTML_Drag_and_Drop_API">HTML Drag and Drop API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            <strong>HTML Drag and Drop</strong> interface enables applications to use drag-and-drop features in browsers. The user may select <em>draggable</em> elements with a mouse, drag those elements to a <em>droppable</em> element, and drop them by releasing the mouse button. A translucent representation of the <em>draggable</em> elements follows the pointer during the drag operation. 
        </blockquote>
        <p class="mt-2">
            Making an element <em>draggable</em> requires the <span class="text-code">draggable</span> attribute and the <span class="text-code">dragstart</span> event handler. The application is free to include any number of data items in a drag operation. Each data item is a string of a particular <span class="text-code">type</span>. Each <span class="text-code">DragEvent</span> has a <span class="text-code">dataTransfer</span> property that <em>holds</em> the event's data. This property has methods to <em>manage</em> drag data. The <span class="text-code">dropEffect</span> is used to control the feedback the user is given during the drag-and-drop operation. To change the behavior so that an element becomes a <em>drop zone</em> or is <em>droppable</em>, the element must listen to both <span class="text-code">dragover</span> and <span class="text-code">drop</span> events. At the end of the drag operation, the <span class="text-code">dragend</span> event fires at the <em>source</em> element - the element that was the target of the drag start.
        </p>
         
    </div>
</section>
<section id="id_85a038f3-027b-4dc0-a4aa-acb804793209" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_85a038f3-027b-4dc0-a4aa-acb804793209" class="same-page bold">History API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_143f5c31-c81f-441f-a6a7-1244ec4dd16c">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_143f5c31-c81f-441f-a6a7-1244ec4dd16c" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/History_API">History API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>History API</strong> provides access to the browser's session history (not to be confused with WebExtensions history) through the <span class="text-code">history</span> global object. It exposes useful methods and properties that let you navigate back and forth through the user's history, and manipulate the contents of the history stack. 
        </blockquote>
         
    </div>
</section>
<section id="id_004b3d4c-f348-4b4d-84bb-953f8823f30c" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_004b3d4c-f348-4b4d-84bb-953f8823f30c" class="same-page bold">Houdini API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_1f9a168b-2fa5-4c73-9edf-c466b0661824">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_1f9a168b-2fa5-4c73-9edf-c466b0661824" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Houdini_APIs">Houdini API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            Houdini is a set of low-level APIs that exposes parts of the CSS engine, giving developers the power to extend CSS by hooking into the styling and layour process of a browser's rendering engine. Houdini is a group of APIs that give developers direct access to the <a class="secondary link" target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model">CSS Object Model</a> (<abbr title="CSS Object Model">CSSOM</abbr>) enabling developers to write code the browser can parse as CSS, thereeby creating new CSS features without waiting for them to be implemented natively in browsers. 
        </blockquote>
        <p class="mt-2">
            Houdini enables faster parse times than using JavaScript <span class="text-code">HTMLElement.style</span> for style changes. Browsers parse the CSSOM - including layout, paint, and composite processes - before applying any style updates found in scripts. A feature of CSS Houdini is the <span class="text-code">Worklet</span>. With worklets, you can create modular CSS, requiring a single line of JavaScript to import configurable components: no pre-processors or JavaScript frameworks needed. 
        </p>
         
    </div>
</section>
<section id="id_f3fe843e-2f6d-4ada-991c-ee3d48f4221a" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_f3fe843e-2f6d-4ada-991c-ee3d48f4221a" class="same-page bold">Idle Detection API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_f09bd45c-95f9-41e7-a535-606c90e4d69f">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_f09bd45c-95f9-41e7-a535-606c90e4d69f" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Idle_Detection_API">Idle Detection API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            <strong class="t-warning">LIMITED AVAILABILITY</strong>, The Idle Detection API provides a means to detect the user's idle status, active, idle, locked, specifically, and to be notified of changes to idle status without polling from a script. 
        </blockquote>
        <p class="mt-2">
            Native applications and browser extensions use idle detection base user experiences on when a user is interacting with a device. For example, chat applications can show other users of an application whether someone is available.
        </p>
         
    </div>
</section>
<section id="id_a03d8d87-2e5f-4ef6-a654-dc60a0a58a1e" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_a03d8d87-2e5f-4ef6-a654-dc60a0a58a1e" class="same-page bold">Image Capture API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_a95fb051-0bd2-477c-8e4b-d2445ae98e4f">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_a95fb051-0bd2-477c-8e4b-d2445ae98e4f" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/MediaStream_Image_Capture_API">Image Capture API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>MediaStream Image Capture API</strong> is an API for capturing images or videos from a photographic device. In addition to capturing data, it allows you to retrieve information about device capabilities such as image size, red-eye reduction and whether ro not there is a flash and what they are currently set to. The API allows the capabilities to be configured within  the constraints what the device allows.  
        </blockquote>
         
    </div>
</section>
<section id="id_d25022aa-d515-471e-a252-cc43e9c81b15" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_d25022aa-d515-471e-a252-cc43e9c81b15" class="same-page bold">IndexedDB</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_6ca6c68f-613c-4585-86eb-b2a84d119a99">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_6ca6c68f-613c-4585-86eb-b2a84d119a99" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/IndexedDB_API">IndexedDB Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            IndexedDB is a low-level API for client-side storage of signifant amounts of structured data, including files/blobs. This API uses indexes to enable high performance searches of this data. While <a class="secondary link" target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">Web Storage</a> is useful for storing smaller amounts of data, it is less useful for storing larger amounts of structured data. IndexedDB provides a solution. 
        </blockquote>
        <p class="mt-2">
            IndexedDB is a transactional database system, like an SQL-based Relational Database Management System (RDBMS). However, unlike SQL-based RDBMSes, which use fixed-column tables, IndexedDB is a JavaScript-based object-oriented database. IndexedDB lets you store and retrieve objects that are indexed with a <strong>key</strong>; any objects supported by the structured clone algorithm can be stored. You need to specify the database schema, open a connection to your database, and then retrieve and update data with a series of <strong>transactions</strong>. Operations performed using IndexedDB are done asynchronously, so to not block applications. 
        </p>
         
    </div>
</section>
<section id="id_1172ecac-64ab-41f3-a5c6-6467516ba7b9" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_1172ecac-64ab-41f3-a5c6-6467516ba7b9" class="same-page bold">Ink API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_490b3ece-dbcc-465c-a3cf-dccb0bcbafdf">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_490b3ece-dbcc-465c-a3cf-dccb0bcbafdf" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Ink_API">Ink API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The Ink API allows browsers to directly make use of available OS-level compositors when drawing pen strokes in an inking app feature, thereby reducing latency and increasing performance. 
        </blockquote>
        <p class="mt-2">
            Inking on the web refers to app features that involve using pointer events to draw a smooth pen stroke. Pointer events are usually sent first to the browser process, which then forwards these event sto the JavaScript event loop to execute their associated handler functions and render the result in the app. The time delay between the start and end of this process can be significant. The Ink API significantly reduced this latency by allowing browsers to bypass the JavaScript loop entirely. Where possible, browsers will pass such rendering instructions directly to OS-level compositors. 
        </p>
         
    </div>
</section>
<section id="id_e14cefe5-0e82-4c10-aa39-f67c1bf21b8b" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_e14cefe5-0e82-4c10-aa39-f67c1bf21b8b" class="same-page bold">Input Device Capabilities API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_15c187b3-323e-49bf-8d22-c8dbec83f6a9">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_15c187b3-323e-49bf-8d22-c8dbec83f6a9" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/InputDeviceCapabilities_API">Input Device Capabilities API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The InputDeviceCapabilities API provides details about the underlying sources of input events. The API attempts to describe how the device behaves rather than what it is. For example, the first version of the API indicates whether a device fires touch events rather than whether it is a touch screen. 
        </blockquote>
        <p class="mt-2">
            Because DOM events abstract device input, they provide no way to learn what device fired an event. This can lead to instances where the same action triggers multiple event handlers. The InputDeviceCapabilities API addresses this problem by abstracting the capabilities of input devices.   
        </p>
<div style="position: relative;"><pre class="hz-scroll"><code class="hljs">myButton.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;mousedown&quot;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {
<span class="hljs-comment">// Touch event case handled above, don&#x27;t change the style again on tap.</span>
<span class="hljs-keyword">if</span> (!e.<span class="hljs-property">sourceCapabilities</span>.<span class="hljs-property">firesTouchEvents</span>) myButton.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;pressed&quot;</span>);
});</code></pre>
<button aria-label="Copy Code Output" data-snackbar data-selem="#copy-code-success" data-copy-prev class="toggle-button small" style="position: absolute; top: 3px; right: 3px; z-index: 2;" aria-haspopup="true">
    <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="ContentCopy">
    <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z">
    </path>
    </svg>
</button>
    </div>
         
    </div>
</section>
<section id="id_83a9e09f-c0f1-4e08-ba04-95f0e33d590f" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_83a9e09f-c0f1-4e08-ba04-95f0e33d590f" class="same-page bold">Insertable Streams for MediaStreamTrack API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_1d33e07c-7a2e-482f-8564-aff82b747ac2">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_1d33e07c-7a2e-482f-8564-aff82b747ac2" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Insertable_Streams_for_MediaStreamTrack_API">Insertable Streams for MediaStreamTrack API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The <strong>Insertable Streams for MediaStreamTrack API</strong> provides a method of adding new components to a <span class="text-code">MediaStreamTrack</span>. 
        </blockquote>
        <p class="mt-2">
            When processing video or audio, you sometimes want o insert additional elements or otherwise process the stream. This API provides a method to manipulate sreams by gibing direct access to the stream, allowing it to be manipulated. 
        </p>
<div style="position: relative;"><pre class="hz-scroll"><code class="hljs"><span class="hljs-keyword">const</span> stream = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getUserMedia</span>({ <span class="hljs-attr">video</span>: <span class="hljs-literal">true</span> });
<span class="hljs-keyword">const</span> videoTrack = stream.<span class="hljs-title function_">getVideoTracks</span>()[<span class="hljs-number">0</span>];

<span class="hljs-keyword">const</span> trackProcessor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaStreamTrackProcessor</span>({ <span class="hljs-attr">track</span>: videoTrack });
<span class="hljs-keyword">const</span> trackGenerator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaStreamTrackGenerator</span>({ <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;video&quot;</span> });

<span class="hljs-keyword">const</span> transformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformStream</span>({
    <span class="hljs-keyword">async</span> <span class="hljs-title function_">transform</span>(<span class="hljs-params">videoFrame, controller</span>) {
    <span class="hljs-keyword">const</span> barcodes = <span class="hljs-keyword">await</span> <span class="hljs-title function_">detectBarcodes</span>(videoFrame);
    <span class="hljs-keyword">const</span> newFrame = <span class="hljs-title function_">highlightBarcodes</span>(videoFrame, barcodes);
    videoFrame.<span class="hljs-title function_">close</span>();
    controller.<span class="hljs-title function_">enqueue</span>(newFrame);
    },
});

trackProcessor.<span class="hljs-property">readable</span>
    .<span class="hljs-title function_">pipeThrough</span>(transformer)
    .<span class="hljs-title function_">pipeTo</span>(trackGenerator.<span class="hljs-property">writable</span>);</code></pre>
    <button aria-label="Copy Code Output" data-snackbar data-selem="#copy-code-success" data-copy-prev class="toggle-button small" style="position: absolute; top: 3px; right: 3px; z-index: 2;" aria-haspopup="true">
    <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="ContentCopy">
        <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z">
        </path>
    </svg>
    </button>
</div>
         
    </div>
</section>
<section id="id_2d2447eb-d6de-4b3c-a4aa-130a75d0a78f" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_2d2447eb-d6de-4b3c-a4aa-130a75d0a78f" class="same-page bold">Intersection Observer API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_bc8753bc-38b1-4694-b360-950c6ec00508">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
    <div id="id_bc8753bc-38b1-4694-b360-950c6ec00508" class="mt-2">
        <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API Reference</a></li></ul>
        <blockquote class="blockquote mt-2">
            The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. Historically, detetcing visibility of an element, or the relative visibility of two elements in relation to each other, has been a difficult task for which solutions have been unreliable and pone to causing th browser and the site the user is accessing to become slugfgish. As the web has matured, the need for this kind of information has grown. Intersection information is needed for reasons such as:
        </blockquote>
        <ul>
            <li>
                Lazy loading of images and other content as a page is scrolled.
            </li>
            <li>
                Implementing <q class="quote">infinite scrolling</q> websites, where more and more content is loaded and rendered as you scroll, so that the user doesn't have to flip through pages. 
            </li>
            <li>
                Reporting of visibility of advertisements in order to calculate ad revenues.
            </li>
            <li>
                Deciding whether or not to perform tasks and animation processes based on whether or not the user will see the result.
            </li>
        </ul>
        <p class="mt-2">
            The Intersection Observer API lets code register a callback function that is executed whenever a particular element enters or exits an intersection with another element, or when the intersection between two elements changes by  a specific amount. This way, sites no longer need to do anything on the main thread to watch for this kind of element intersection, and the browser is free to optimize the management of intersections as it sees fit.
        </p>
        
         
    </div>
</section>
<section id="id_6f6ed247-352b-42c0-a540-50762eab4e59" class="mt-4">
    <div class="flex-row bb-thick justify-between"><h2 class="bold h2"><a href="#id_6f6ed247-352b-42c0-a540-50762eab4e59" class="same-page bold">Invoker Commands API</a></h2>
        <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#id_13230333-f7ff-41a0-ae0f-4945d551d996">
        <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
        <span data-hide="">HIDE</span>
        <span data-show="" hidden="">SHOW</span>
        </button>
    </div>
<div id="id_13230333-f7ff-41a0-ae0f-4945d551d996" class="mt-2">
    <ul><li><a class="secondary link" target="_blank" href="https://developer.mozilla.org//en-US/docs/Web/API/Invoker_Commands_API">Invoker Commands API Reference</a></li></ul>
    <blockquote class="blockquote mt-2">
        The <strong>Invoker Commands API</strong> provides a way to declaratively assign behaviors to buttons, allowing control of interactive elements when the button is enacted (clicked or invoked via a keypress, such as the spacebar or return key).
    </blockquote>
    <p class="mt-2">
        A common pattern on the wbe is to have a <span class="text-code">&lt;button&gt;</span> elements control various elements of the page, such as opening and closing of popovers or <span class="text-code">&lt;dialog&gt;</span> elements. These commands have required JavaScript, but this API allows functionality to occur through HTML attributes.
    </p>
<div style="position: relative;"><pre class="hz-scroll"><code class="hljs"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">commandfor</span>=<span class="hljs-string">&quot;mydialog&quot;</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;show-modal&quot;</span>&gt;</span>Show modal dialog<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dialog</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mydialog&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">commandfor</span>=<span class="hljs-string">&quot;mydialog&quot;</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span>Close<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    Dialog Content
<span class="hljs-tag">&lt;/<span class="hljs-name">dialog</span>&gt;</span></span></code></pre>
        <button aria-label="Copy Code Output" data-snackbar data-selem="#copy-code-success" data-copy-prev class="toggle-button small" style="position: absolute; top: 3px; right: 3px; z-index: 2;" aria-haspopup="true">
        <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="ContentCopy">
            <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z">
            </path>
        </svg>
        </button>
    </div>       
         
    </div>
</section>