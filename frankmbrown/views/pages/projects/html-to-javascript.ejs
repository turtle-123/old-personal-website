<%# 
PARTIAL ROUTE: pages/projects/html-to-javascript.ejs
PARTIAL DESCRIPTION: Description...
LOCAL VARIABLES:
----------------------------------
- locals.fullPageRequest
- locals.pageRequest
%>
<%if(locals.fullPageRequest||locals.pageRequest){%>
  <h1 class="page-title">Convert HTML To JavaScript</h1>

  <div class="alert warning outlined icon medium mt-3" role="alert">
    <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="Warning"><path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"></path></svg>
    <p class="alert">
      I created this page a while back and still want to do something with it, but haven;t gotten around to it. The original idea of this page was to convert HTML to client side JavaScript that would not suffer XSS attacks, but I have since figured out the way that I did this was not the best. I now want to create something that will help me generate translations from HTML, something that will transform JSON objects - including nested objects - to golang structs, and maybe something else. 
    </p>
    <button aria-label="Close Alert" class="icon medium close-alert" type="button">
      <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="Close"><path d="M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></svg>
    </button>
  </div>

  <section id="why" class="mt-3">
    <h2 class="bold bb-thick h2">
      <a href="#why" class="same-page fw-regular">Why HTML To JavaScript</a>
    </h2>
    <p class="body1 mt-3">
      Sometimes, you want to generate HTML on the client because you want to decrease server load, and sometimes you want to generate HTML on the 
      client to prevent the DOM from becoming too big. By generating HTML on the client for the latter reason, you will improve the performance of the application.
    </p>
    <p class="body1 mt-3">
      Below, you can insert a <span><code class="hljs"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span></code></span> string into the <span><code class="hljs"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span></span></code></span>
      and submit the form to generate: 
    </p>
    <ol>
      <li>
        JavaScript code that can be used to generate the html string as-is on the client.
      </li>
      <li>
        A JSON object that can be used to generate HTML by feeding the JSON into the function below.
        <ul>
          <li>This JSON object was included because sometimes you may want to edit the innerText of some DOM nodes based on the user's preferred language.</li>
        </ul>
      </li>
    </ol>
<div style="position: relative;" class="mt-3"><pre class="hz-scroll"><code class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ParsedElementCheerioObject</span> = {
  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,
  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;tag&quot;</span>,
  <span class="hljs-attr">attributes</span>: {[<span class="hljs-attr">s</span>:<span class="hljs-built_in">string</span>]:<span class="hljs-built_in">string</span>},
  <span class="hljs-attr">children</span>: (<span class="hljs-title class_">ParsedElementCheerioObject</span>|<span class="hljs-title class_">ParsedTextCheerioObject</span>)[]
};
<span class="hljs-keyword">type</span> <span class="hljs-title class_">ParsedTextCheerioObject</span> = {
  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;text&quot;</span>,
  <span class="hljs-attr">children</span>: [],
  <span class="hljs-attr">data</span>: <span class="hljs-built_in">string</span>
}
<span class="hljs-keyword">type</span> <span class="hljs-title class_">ParsedScriptCheerioObject</span> = {
  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;script&quot;</span>,
  <span class="hljs-attr">children</span>: (<span class="hljs-title class_">ParsedElementCheerioObject</span>|<span class="hljs-title class_">ParsedTextCheerioObject</span>)[],
  <span class="hljs-attr">attributes</span>: {[<span class="hljs-attr">s</span>:<span class="hljs-built_in">string</span>]:<span class="hljs-built_in">string</span>},
  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>
};
<span class="hljs-keyword">type</span> <span class="hljs-title class_">ParsedStyleCheerioObject</span> = {
  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,
  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;style&quot;</span>,
  <span class="hljs-attr">attributes</span>: {[<span class="hljs-attr">s</span>:<span class="hljs-built_in">string</span>]:<span class="hljs-built_in">string</span>},
  <span class="hljs-attr">children</span>: (<span class="hljs-title class_">ParsedElementCheerioObject</span>|<span class="hljs-title class_">ParsedTextCheerioObject</span>)[],
}

<span class="hljs-keyword">type</span> <span class="hljs-title class_">ParsedCheerioObject</span> = <span class="hljs-title class_">ParsedElementCheerioObject</span>|<span class="hljs-title class_">ParsedTextCheerioObject</span>|<span class="hljs-title class_">ParsedScriptCheerioObject</span>|<span class="hljs-title class_">ParsedStyleCheerioObject</span>;
<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VALID_CHEERIO_OBJECT_TYPE</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;tag&#x27;</span>,<span class="hljs-string">&#x27;text&#x27;</span>,<span class="hljs-string">&#x27;script&#x27;</span>,<span class="hljs-string">&#x27;style&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-keyword">const</span>);
<span class="hljs-keyword">function</span> <span class="hljs-title function_">getNextVarName</span>(<span class="hljs-params">varName:<span class="hljs-built_in">string</span></span>) {
  <span class="hljs-keyword">if</span> (varName.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;z&#x27;</span>)) {
    <span class="hljs-keyword">return</span> varName.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,varName.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>).<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;A&#x27;</span>);
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (varName.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;Z&#x27;</span>)) {
    <span class="hljs-keyword">return</span> varName.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span> <span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;a&#x27;</span>);
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">var</span> s = varName.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>);
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-property">length</span>;i++) {
      <span class="hljs-keyword">if</span> (s[i]!==<span class="hljs-string">&#x27;Z&#x27;</span>) {
        s[i] = s[i]===<span class="hljs-string">&#x27;z&#x27;</span> ? <span class="hljs-string">&#x27;A&#x27;</span>  : <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(s[i].<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);
        <span class="hljs-keyword">break</span>;
      }
    }
    <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);
  }
}
<span class="hljs-keyword">function</span> <span class="hljs-title function_">createNodeStr</span>(<span class="hljs-params">el:ParsedCheerioObject,str:<span class="hljs-built_in">string</span>,curVarName:<span class="hljs-built_in">string</span></span>) {
  <span class="hljs-keyword">var</span> newStr = str;
  <span class="hljs-keyword">if</span> (el.<span class="hljs-property">type</span>===<span class="hljs-string">&quot;tag&quot;</span>||el.<span class="hljs-property">type</span>===<span class="hljs-string">&quot;script&quot;</span>||el.<span class="hljs-property">type</span>===<span class="hljs-string">&quot;style&quot;</span>){
    newStr += <span class="hljs-string">`const <span class="hljs-subst">${curVarName}</span> = document.createElement(&quot;`</span>.<span class="hljs-title function_">concat</span>(el.<span class="hljs-property">name</span>).<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;&quot;);\n&#x27;</span>);
    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(el.<span class="hljs-property">attributes</span>)
    .<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>)=&gt;</span>{
      newStr+= <span class="hljs-string">`<span class="hljs-subst">${curVarName}</span>.setAttribute(&quot;<span class="hljs-subst">${key}</span>&quot;,<span class="hljs-subst">${<span class="hljs-built_in">JSON</span>.stringify(el.attributes[key])}</span>);\n`</span>;
    })
    <span class="hljs-keyword">const</span> <span class="hljs-attr">charsToAppend</span>:<span class="hljs-built_in">string</span>[] = [];
    <span class="hljs-keyword">var</span> latestVarName = curVarName;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> child <span class="hljs-keyword">of</span> el.<span class="hljs-property">children</span>) {
      <span class="hljs-keyword">const</span> { <span class="hljs-attr">str</span>:newString, <span class="hljs-attr">latestVarName</span>:newLatestVarName } = <span class="hljs-title function_">createNodeStr</span>(child,newStr,<span class="hljs-title function_">getNextVarName</span>(latestVarName));
      latestVarName = newLatestVarName;
      charsToAppend.<span class="hljs-title function_">push</span>(newLatestVarName);
      newStr = newString;
    }
    newStr+=<span class="hljs-string">`<span class="hljs-subst">${curVarName}</span>.append(`</span>.<span class="hljs-title function_">concat</span>(charsToAppend.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span> s).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>)).<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;);\n&#x27;</span>);
    <span class="hljs-keyword">return</span> { <span class="hljs-attr">str</span>: newStr, latestVarName };
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (el.<span class="hljs-property">type</span>===<span class="hljs-string">&quot;text&quot;</span>){
    newStr += <span class="hljs-string">`const <span class="hljs-subst">${curVarName}</span> = document.createTextNode(\``</span>.<span class="hljs-title function_">concat</span>(el.<span class="hljs-property">data</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/`/g</span>, <span class="hljs-string">&#x27;\\`&#x27;</span>)).<span class="hljs-title function_">concat</span>(<span class="hljs-string">`\`);\n`</span>);
    <span class="hljs-keyword">return</span> { <span class="hljs-attr">str</span>: newStr, <span class="hljs-attr">latestVarName</span>: curVarName };
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Unrecognized object type.&#x27;</span>);
}
<span class="hljs-keyword">function</span> <span class="hljs-title function_">creatingHTMLFromJSON</span>(<span class="hljs-params">arr:ParsedCheerioObject[]</span>) {
  <span class="hljs-keyword">var</span> curVarName = <span class="hljs-string">&quot;a&quot;</span>;
  <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> obj <span class="hljs-keyword">of</span> arr) {
    <span class="hljs-keyword">const</span> { <span class="hljs-attr">str</span>:newString, latestVarName } = <span class="hljs-title function_">createNodeStr</span>(obj,str,curVarName);
    curVarName = <span class="hljs-title function_">getNextVarName</span>(latestVarName);
    str = newString;
  }
  <span class="hljs-keyword">return</span> str;
}
<span class="hljs-keyword">function</span> <span class="hljs-title function_">createNode</span>(<span class="hljs-params">obj:ParsedCheerioObject</span>) {
  <span class="hljs-keyword">if</span>(obj.<span class="hljs-property">type</span>===<span class="hljs-string">&quot;tag&quot;</span>||obj.<span class="hljs-property">type</span>===<span class="hljs-string">&quot;script&quot;</span>||obj.<span class="hljs-property">type</span>===<span class="hljs-string">&quot;style&quot;</span>) {
    <span class="hljs-keyword">const</span> node = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(obj.<span class="hljs-property">name</span>);
    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj.<span class="hljs-property">attributes</span>)
    .<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> node.<span class="hljs-title function_">setAttribute</span>(key,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj.<span class="hljs-property">attributes</span>[key])));
    <span class="hljs-keyword">if</span>(obj.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>) {
      node.<span class="hljs-title function_">append</span>(...obj.<span class="hljs-property">children</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">obj</span>) =&gt;</span> <span class="hljs-title function_">createNode</span>(obj)));
    }
    <span class="hljs-keyword">return</span> node;
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">type</span>===<span class="hljs-string">&quot;text&quot;</span>) {
    <span class="hljs-keyword">const</span> textNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(obj.<span class="hljs-property">data</span>);
    <span class="hljs-keyword">return</span> textNode;
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Unrecognized Type&#x27;</span>);
}
<span class="hljs-keyword">function</span> <span class="hljs-title function_">createNodesFromJSON</span>(<span class="hljs-params">arr:ParsedCheerioObject[]</span>) {
  <span class="hljs-keyword">const</span> retArr = [];
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> obj <span class="hljs-keyword">of</span> arr) {
    retArr.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">createNode</span>(obj));
  }
  <span class="hljs-keyword">return</span> retArr;
}

</code></pre>
        <button aria-label="Copy Code Output" data-snackbar data-selem="#copy-code-success" data-copy-prev class="toggle-button small" style="position: absolute; top: 3px; right: 3px; z-index: 2;" aria-haspopup="true">
          <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="ContentCopy">
            <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z">
            </path>
          </svg>
        </button>
      </div>
  </section>
  <div class="alert warning icon filled medium mt-4" role="alert">
    <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="Warning"><path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"></path></svg>
    <p class="alert">
      This doesn't work well right now due to an issue with the template strings.  
    </p>
    <button aria-label="Close Alert" class="icon medium close-alert" type="button">
      <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="Close"><path d="M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></svg>
    </button>
  </div>
  <form id="html-to-javascript-form" class="mt-4">
    <div class="input-group block mt-1" data-hover="false" data-focus="false" data-error="false" data-blurred="false"> 
      <label for="html-string">HTML String:</label>
      <div class="mt-1 text-input block medium disabled">
          <textarea 
          name="html-string" 
          id="html-string" 
          placeholder="Input the HTML string that you want converted to JavaScript that can produce an equivalent html string on the client..." 
          rows="10" 
          spellcheck="false"
          autocomplete="off"
          autocapitalize="off"
          style="resize: vertical;"
          ></textarea>
      </div>
    </div>

    <div class="mt-4 flex-row justify-between align-center">
      <input role="button" value="RESET"  type="reset" aria-label="Reset Form"></input>
      <button type="submit" aria-label="Submit Form" class="success filled icon-text medium">
        <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="Send"><path d="M2.01 21 23 12 2.01 3 2 10l15 2-15 2z"></path></svg>
        SUBMIT FORM
      </button>
    </div>
  </form>
  <output form="html-to-javascript-form" class="mt-4 block" id="copy-form-output">
    <p class="h6 bold bb-main">JSON Output:</p>
    <div class="hz-scroll" style="position: relative; min-height: 200px;max-height: 300px; overflow-y: auto;">
      <pre id="json-output" class="mt-2" style="width: 100%;">
Enter a HTML string in the 
textarea above.
      </pre>
      <input type="text" hidden id="json-output-input" name="json-output-input" value="Enter a HTML string in the textarea above." />
      <button type="button" data-copy-input="" data-input="json-output-input" class="toggle-button medium" style="position: absolute; top: 3px; right: 3px; z-index: 2;" aria-haspopup="true" data-snackbar="" data-selem="#copied-text">
        <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="ContentCopy">
          <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z">
          </path>
        </svg>
      </button>
    </div>
    <p class="h6 bold bb-main mt-4">JavaScript Output:</p>
    <div class="hz-scroll" style="position: relative; min-height: 200px; max-height: 300px; overflow-y: auto;">
      <pre id="javascript-output" class="mt-2" style="width: 100%;">
Enter a HTML string in the 
textarea above.
      </pre>
      <input type="text" hidden id="javascript-output-input" name="javascript-output-input" value="Enter a HTML string in the textarea above." />
      <button type="button" data-copy-input="" data-input="javascript-output-input" class="toggle-button medium" style="position: absolute; top: 3px; right: 3px; z-index: 2;" aria-haspopup="true" data-snackbar="" data-selem="#copied-text">
        <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="ContentCopy">
          <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z">
          </path>
        </svg>
      </button>
    </div>
  </output>

  <div id="copied-text" class="snackbar success" aria-hidden="true" role="alert" data-snacktime="4000">
    <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="Code"><path d="M9.4 16.6 4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0 4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z"></path></svg>
    <p class="p-sm">
      Successfully copied code to clipboard.
    </p>
    <button class="icon medium" type="button" data-close-snackbar aria-label="Close Snackbar">
      <svg focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="CloseSharp"><path d="M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"></path></svg>
    </button>
  </div>
  <%-include('../../partials/pagePartial')%>
<%}%>