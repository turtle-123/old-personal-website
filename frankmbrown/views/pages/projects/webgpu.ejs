<%if(locals.fullPageRequest||locals.pageRequest){%>
  
    <h1 class="page-title">WebGPU</h1>

    <section id="about-page" class="mt-4">
        <div class="flex-row bb-thick justify-between">
          <h2 class="bold h2">
            <a href="#about-page" class="same-page bold">
              About Page
            </a>
          </h2>
          <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#about-page-hide">
            <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
            <span data-hide="">HIDE</span>
            <span data-show="" hidden="">SHOW</span>
          </button>
        </div>
        <div id="about-page-hide">
            <p class="mt-2">
                I decided that I wanted to know more about WebGPU, so I am creating this page to house some WebGPU projects as I go through a WebGPU tutorial. The tutorial that I am going through can be seen <a class="secondary link" target="_blank" href="https://youtu.be/p3qR_wGhVus">here</a>.
            </p>
        </div>
      </section>
  
  
      <section id="notes-page" class="mt-4">
          <div class="flex-row bb-thick justify-between">
            <h2 class="bold h2">
              <a href="#notes-page" class="same-page bold">
                Notes on WebGPU
              </a>
            </h2>
            <button type="button" class="small icon-text text warning" data-hide-show="" data-el="#notes-page-hide">
              <svg data-arrow="" focusable="false" inert viewBox="0 0 24 24" tabindex="-1" title="KeyboardArrowUp"><path d="M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path></svg>
              <span data-hide="">HIDE</span>
              <span data-show="" hidden="">SHOW</span>
            </button>
          </div>
          <div id="notes-page-hide">
              <h4 class="bold mt-2 h4">
                  WebGPU Notes (Detailed)
              </h4>
              <ul class="mt-3" start="1"><li><p class="body1 mt-3"><strong class="bolder">WebGPU Fundamentals</strong></p><ul class="mt-3" start="1"><li>WebGPU uses JavaScript to control the GPU for calculations and drawing on the web.</li><li>It's a new API standard defined by the W3C organization.</li><li>The standard aims for support across all major browsers and device manufacturers.</li><li>WebGPU is considered a new generation of graphics API.</li><li>It applies modern graphics APIs (like 3D, Direct3D, Vulkan, and Metal).</li><li>Key benefits compared to WebGL:<ul class="mt-3" start="1"><li>Faster</li><li>More powerful</li><li>More flexible</li><li>More aligned with modern web development standards</li></ul></li></ul></li><li><p class="body1 mt-3"><strong class="bolder">Render Pipeline and Data Handling</strong></p><ul class="mt-3" start="1"><li>In the example provided, the render pipeline accesses data directly from the MVP (Model-View-Projection) buffer.</li><li>This approach focuses on efficient data sharing within the GPU.</li><li>JavaScript's role is primarily code flow control.</li><li>Data transfers between CPU and GPU are minimized (e.g., camera position changes are possible, but particle motion logic stays on the GPU).</li><li>Particle motion logic is written in the shader.</li><li>For example, particle positions are updated within the shader based on initial velocity and rebound logic.</li><li>Instead of passing updated positions back to JavaScript, the MVP matrix is modified directly, as it's bound to the render pipeline.</li><li>The vertex shader calculates vertex coordinates using this updated MVP buffer.</li></ul></li><li><p class="body1 mt-3"><strong class="bolder">Compute Pipeline</strong></p><ul class="mt-3" start="1"><li>Real-world WebGPU projects often involve multiple compute pipelines.</li><li>Complex physical simulations may require dozens or even hundreds of compute pipelines in series.</li><li>Storage buffers are essential for sharing data between these different pipelines.</li><li>The CPU's role is primarily control:<ul class="mt-3" start="1"><li>Overall process management</li><li>Handling user input (mouse, keyboard)</li></ul></li></ul></li><li><p class="body1 mt-3"><strong class="bolder">General Notes</strong></p><ul class="mt-3" start="1"><li>The provided code examples are available on a GitHub repository.</li><li>The transcript mentions an "Evolution Web GPU Engine" that is going to be published.</li></ul></li></ul>
            </div>
        </section>


        <section id="tutorial-1" class="mt-4">
            <h2 class="bold bb-thick h2">
              <a href="#tutorial-1" class="same-page bold">
                Tutorial 1
              </a>
            </h2>

            <div style="position: relative; max-width: 450px; max-height: 450px; margin: 6px auto;" id="web-gpu-tut-1">
              <button data-fullscreen-btn="" data-el="#web-gpu-tut-1" type="button" class="icon medium fullscreen-btn" aria-label="Enter / Exit Fullscreen">
                  <svg data-enter="" focusable="false" inert="" viewBox="0 0 24 24" tabindex="-1" title="Fullscreen"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"></path></svg>
                  <svg data-exit="" hidden="" focusable="false" inert="" viewBox="0 0 24 24" tabindex="-1" title="FullscreenExit"><path d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"></path></svg>
                </button>
                <div id="gui-container" style="position:absolute;top:0px;left:0px;"></div>
              <canvas id="web-gpu-tut-1-canvas" width="450" height="450"></canvas>
            </div>
        </section>

        <script nonce="<%=locals.jsNonce%>" type="module" defer src="/static/js/constant/webgpu-tutorial-1.js"></script>

    <%-include('../../partials/pagePartial')%>
  <%}%>